#!/bin/sh
set -e

# TODO: finish this, still a work in progress

use_unix_terminal() {
	check_prerequisites
	#setup_terminal
	#navigate_file_system
	#manipulate_files
	#edit_files_with_text_editor
	#manage_screens_with_tmux
	#code_simple_shell_scripts
	#manage_source_with_git
	#manage_development_with_github
	#configure_interactive_shell
	#configure_vim_nvim
	#use_web_from_terminal
	#use_ai_from_terminal
	#use_irc_from_terminal
	#manipulate_text_with_perl
	#plan_next_move
}

check_prerequisites() {
	have_basic_linear_algebra # y = 2x + 3
	#have_6th_grade_reading_level  # ex: The Boy Who Harnessed the Wind
	#have_compatible_computer      # intel, apple, raspi, orangepi
	#have_admin_rights_on_computer # root, administator
	#have_internet_access          # basic cable connection
}

have_basic_linear_algebra() {
	assert \
		"Do you have basic linear algebra skills?" \
		"Consider Kahn Academy."
}

# ----------------------------- utilities ----------------------------

assert() {
	printf "%s [N|y] " "$1"
	read -r resp
	if [ "$resp" != y ]; then
		echo "$2"
		exit
	fi
}

use_unix_terminal

# ----------------------------- old stuff ----------------------------

: <<-'EOM'
	setup_terminal_on_workstation() {
		:start_using_computer_efficiently # launcher, alt_tab, search_centric
		:start_using_unix_like_system     # Ubuntu Linux, macOS, WSL2
		:start_using_package_managers     # apt, brew, winget.exe

		read _rp "Do you care about colors and fastest terminal? [Y|n]" resp
		if [[ ${resp,,} =~ ^y ]]; then
			:start_using_wezterm_terminal
		else
			:start_using_builtin_terminal
		fi
	}

	# Note that this includes both default PowerShell on Windows
	# as well as bash, zsh, and any other POSIX Unix shell.
	start_using_basic_shell_commands() {
		:start_working_with_files_from_command_line
	}

	start_working_with_files_from_command_line() {
		local mode=command_line_only
		:grok_file_system_heirarchy
		:grok_drive_mounting
		:grok_how_everything_is_a_file_in_unix
		:start_listing_files
		:start_navigating_file_system
		:start_finding_files_with_find_command
		:start_working_with_file_permissions
		:start_seeing_whats_in_files
		:start_modifying_files_without_editor
		:start_organizing_files
		:start_linking_files
	}

	start_using_web_from_terminal() {
		start_fetching_single_web_pages_with_curl
		start_browsing_web_with_w3m
		fetch_initial_lynx_config
		start_browsing_web_with_lynx # requires bash scripting skill
	}

	start_connecting_with_other_terminal_lovers() {
		start_watching_terminal_geeks_on_youtube
		start_chatting_with_twitch_terminal_streamers
		start_using_weechat_for_twitch_and_irc
		start_chatting_on_preferred_irc_channels
	}

	start_creating_advanced_terminal_apps() {
		:grok_map_filter_reduce_transform
		:start_creating_advanced_bash_commands  # parameter expansion, hashes, etc.
		:start_creating_terminal_commands_in_go # flags, bonzai, cobra, bubbletea
		:learn_enough_lua_for_dynamic_configs   # ~/.wezterm.lua, ~/.config/nvim/init.lua
	}

	start_managing_stuff_with_git() {
		grok_git_essentials        # just for local backups
		start_using_bare_git_repos # just on local computer
		start_using_github         # but not necessarily for everything
		start_dot_repo             # often called "dotfiles"
		start_lab_repo             # for notes and testing
	}

	start_creating_stuff_using_terminal() {
		start_editing_text_from_terminal  # nano → ed → ex → vi (nvi) → vim → nvim
		start_using_terminal_multiplexers # screen → tmux
		start_taking_notes_in_markdown    #specifically GitHub Flavored Markdown
		start_writing_basic_bash_scripts  # but not too many until git
		start_custom_bashrc               # more than just ~/.bashrc
	}

	start_creating_advanced_bash_commands() {
		create_filters_in_bash
	}

	declare _i TRUE=0
	declare _i FALSE=1
	#declare TERMPREF=wezterm

	start_using_dotfiles_repo() {
		: TODO pull in tmux.conf
	}

	start_writing_scripts_in_bash() {
		: grok_posix_vs_bash
		:customize_bashrc
	}

	start_using_with_irc() {
		:
	}

	start_using_unix_like_system() {
		start_using_basic_universal_shell_commands
		grok_history_of_unix
		grok_why_unix
		get_unix_like_system
	}

	start_using_wezterm() {
		launch_default_terminal
		install_wezterm
		config_wezterm_with_nano
	}

	start_using_package_managers() {
		grok_package_managers
		setup_package_manager
	}

	start_using_terminal_multiplexers() {
		grok_multiplexers
		install_tmux
		config_tmux_like_screen
		learn_tmux
	}

	config_tmux_like_screen() {
		: TODO give option to pull down reliable tmux.conf from Web
	}

	grok_multiplexers() {
		grok_screen_history
		grok_tmux_history
		if agree_to_config_tmux_like_screen; then
			download_tmux_screen_config
			apply_tmux_screen_config
		fi
	}

	download_tmux_screen_config() {
		:
	}

	apply_tmux_screen_config() {
		:
	}

	agree_to_config_tmux_like_screen() {
		:
	}

	grok_screen_history() {
		:
	}

	grok_tmux_history() {
		:
	}

	start_editing_text_from_terminal() {
		: customize_vim
		: customize_neovim
	}

	start_writing_your_own_docs() {
		:
	}

	start_using_git_and_github() {
		:
	}

	validate_computer_specs() {
		:
	}

	learn_alt_tab() {
		:
	}

	learn_launcher() {
		:
	}

	prefer_search_centric_navigation() {
		:
	}

	grok_why_unix() {
		:
	}

	grok_package_managers() {
		:
	}

	setup_package_manager() {
		:
	}

	launch_default_terminal() {
		:
	}

	install_wezterm() {
		:
	}

	start_using_computer_efficiently() {
		learn_alt_tab
		learn_launcher
		prefer_search_centric_navigation
	}

	config_wezterm_with_nano() {
		:
	}

	grok_unix_history() {
		:
	}

	launch_builtin_terminal() {
		if is_mac; then
			launch "terminal"
		elif is_win; then
			launch "wsl.exe" # we assume WSL2 was already installed
		elif is_lin; then
			: # TODO
		fi
	}

	press() {
		printf "Press the %s key." "$1"
	}

	enter() {
		printf "Type in '%s' and press Enter." "$1"
	}

	launch() {
		if is_mac; then
			:
		elif is_win; then
			press 'Win'
			enter "$1"
		elif is_linux; then # FIXME which linux
			:
		fi
	}

	have_mac() {
		if [[ "$OSTYPE" =~ ^darwin ]]; then
			return $TRUE
		else
			return $FALSE
		fi
	}

	get_unix_like_system() {
		if have_mac; then
			install_brew
		fi
	}

	install_brew() {
		echo would install brew
	}

	boost_to_terminal_velocity
EOM
